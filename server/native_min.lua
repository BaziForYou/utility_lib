_G["ESX"]=nil;local a=RegisterServerEvent;RegisterServerEvent=function(b,c,d)a(b)if d==nil then AddEventHandler(b,function(...)_source=source;xPlayer=ESX.GetPlayerFromId(_source)c(...)end)elseif d then AddEventHandler(b,c)end end;StartESX=function(e)TriggerEvent(e or'esx:getSharedObject',function(f)ESX=f end)end;ShowNotification=function(source,g)TriggerClientEvent('esx:showNotification',source,g)end;CreateLoop=function(h,i)Citizen.CreateThread(function()local j=true;local k={}_break=function()j=false end;LoopThread=function(l,m,h)if k[l]==nil then k[l]={a=true,b=false}end;if k[l].a then if not k[l].b then k[l].b=true;Citizen.SetTimeout(m,function()h()k[l].b=false end)end end end;TaskBack=function(l,h)LoopThread(l,5000,function()h()end)end;TaskSlow=function(l,h)LoopThread(l,1000,function()h()end)end;TaskFast=function(l,h)LoopThread(l,500,function()h()end)end;TaskExtrafast=function(l,h)LoopThread(l,5,function()h()end)end;StopLoopThread=function(l)k[l].a=false end;ResumeLoopThread=function(l)k[l].a=true end;while j do h()Citizen.Wait(i or 5)end end)end;AddItem=function(n,o)xPlayer.addInventoryItem(n,o)end;RemoveItem=function(n,o)xPlayer.removeInventoryItem(n,o)end;GetItem=function(n)return xPlayer.getInventoryItem(n)end;HaveItem=function(n)return xPlayer.getInventoryItem(n).count>0 end;HaveItemQuantity=function(n,p)return xPlayer.getInventoryItem(n).count>p end;AddMoney=function(type,o)if type=="cash"then xPlayer.addMoney(o)else xPlayer.addAccountMoney(type,o)end end;RemoveMoney=function(type,o)if type=="cash"then xPlayer.removeMoney(o)else xPlayer.removeAccountMoney(type,o)end end;HaveMoney=function(type,o)if type=="cash"then return xPlayer.getMoney()>=o else return xPlayer.getAccount(type).money>=o end end;StartMySQL=function()MySQL={Async={},Sync={}}local function q(r)if nil==r then return{['']=''}end;assert(type(r)=="table","A table is expected")if next(r)==nil then return{['']=''}end;return r end;function MySQL.Sync.execute(s,r)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")local t=0;local u=false;exports['mysql-async']:mysql_execute(s,q(r),function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Sync.fetchAll(s,r)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")local t={}local u=false;exports['mysql-async']:mysql_fetch_all(s,q(r),function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Sync.fetchScalar(s,r)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")local t=''local u=false;exports['mysql-async']:mysql_fetch_scalar(s,q(r),function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Sync.insert(s,r)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")local t=0;local u=false;exports['mysql-async']:mysql_insert(s,q(r),function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Sync.store(s)assert(type(s)=="string","The SQL Query must be a string")local t=-1;local u=false;exports['mysql-async']:mysql_store(s,function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Sync.transaction(w,r)local t=0;local u=false;exports['mysql-async']:mysql_transaction(w,r,function(v)t=v;u=true end)repeat Citizen.Wait(0)until u==true;return t end;function MySQL.Async.execute(s,r,x)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_execute(s,q(r),x)end;function MySQL.Async.fetchAll(s,r,x)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_all(s,q(r),x)end;function MySQL.Async.fetchScalar(s,r,x)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_scalar(s,q(r),x)end;function MySQL.Async.insert(s,r,x)assert(type(s)=="string"or type(s)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_insert(s,q(r),x)end;function MySQL.Async.store(s,x)assert(type(s)=="string","The SQL Query must be a string")exports['mysql-async']:mysql_store(s,x)end;function MySQL.Async.transaction(w,r,x)return exports['mysql-async']:mysql_transaction(w,r,x)end;function MySQL.ready(y)Citizen.CreateThread(function()while GetResourceState('mysql-async')~='started'do Citizen.Wait(0)end;while not exports['mysql-async']:is_ready()do Citizen.Wait(0)end;y()end)end end;ExecuteSql=function(s,r)if MySQL==nil then StartMySQL()end;if string.find(s,"SELECT")then return MySQL.Sync.fetchAll(s,r)elseif string.find(s,"INSERT")or string.find(s,"UPDATE")then MySQL.Sync.execute(s,r)end end;SocietyAddItem=function(z,n,o)if not string.find(z,"society_")then z="society_"..z end;TriggerEvent('esx_addoninventory:getSharedInventory',z,function(A)A.addItem(n,o)end)end;SocietyRemoveItem=function(z,n,o)if not string.find(z,"society_")then z="society_"..z end;TriggerEvent('esx_addoninventory:getSharedInventory',z,function(A)A.removeItem(n,o)end)end;SocietyGetItem=function(z,n)if not string.find(z,"society_")then z="society_"..z end;local B=nil;TriggerEvent('esx_addoninventory:getSharedInventory',z,function(A)B=A.getItem(n)end)while B==nil do Citizen.Wait(1)end;return B end;SocietyHaveItem=function(z,n)if not string.find(z,"society_")then z="society_"..z end;local B=nil;TriggerEvent('esx_addoninventory:getSharedInventory',z,function(A)local C=A.getItem(n).count;B=C>0 end)while B==nil do Citizen.Wait(1)end;return B end;SocietyHaveItemQuantity=function(z,n,p)if not string.find(z,"society_")then z="society_"..z end;local B=nil;TriggerEvent('esx_addoninventory:getSharedInventory',z,function(A)local C=A.getItem(n).count;B=C>p end)while B==nil do Citizen.Wait(1)end;return B end;SocietyAddMoney=function(z,o)if not string.find(z,"society_")then z="society_"..z end;TriggerEvent('esx_addonaccount:getSharedAccount',z,function(D)D.addMoney(o)end)end;SocietyRemoveMoney=function(z,o)if not string.find(z,"society_")then z="society_"..z end;TriggerEvent('esx_addonaccount:getSharedAccount',z,function(D)D.removeMoney(o)end)end;SocietyHaveMoney=function(z,o)if not string.find(z,"society_")then z="society_"..z end;local E=nil;TriggerEvent('esx_addonaccount:getSharedAccount',z,function(D)E=D.money>=o end)while E==nil do Citizen.Wait(1)end;return E end;printd=function(F)if type(F)=="table"then print(json.encode(F,{indent=true}))else developer("^1Error","error dumping table "..F.." why isnt a table","")end end;local G=string.gsub;string.multigsub=function(string,table,H)if type(table)then for I=1,#table do string=G(string,table[I],H[I])end else for I=1,#table do string=G(string,table[I],H)end end;return string end;table.fexist=function(F,J)F=F[J]if not F then return false else return true end end;local K=table.remove;table.remove=function(F,L,M)if type(L)=="number"then K(F,L)elseif type(L)=="string"then for N,O in pairs(F)do if N==L then F[N]=nil;if M then break end end end end end;table.empty=function(F)return next(F)==nil end;table.clone=function(F)F.metatable={__index=F}local P={}setmetatable(P,F.metatable)return P end
